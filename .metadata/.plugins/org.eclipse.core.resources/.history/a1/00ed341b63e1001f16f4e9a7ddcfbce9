package hub.policy.security;

import java.security.Key;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class JwtUtils {
	
	@Value("${SECRET_KEY}")
	private String jwtSecret;
	
	@Value("${EXP_TIMEOUT}")
	private int jwtExpirationMs;
	
	private Key key;

	public void init() {
		key=Keys.hmacShaKeyFor(jwtSecret.getBytes());
	}
	
	
	public String generateJwtToken(Authentication authentication) {
	   log.info("generate jwt token "+ authentication);	
	   CustomUserDetails userPrincipal =(CustomUserDetails)authentication.getPrincipal();
	   return Jwts.builder();
	}
	
	public Claims validateJwtToken(String jwtToken) {
		Claims claims = Jwts.parserBuilder().setSigningKey(key).build().
				parseClaimsJws(jwtToken).getBody();
		return claims;
	}

	private String getAuthoritiesInString(Collection<? extends GrantedAuthority> authorities) {
		String authorityString = authorities.stream()
				.map(authority -> authority.getAuthority())
				.collect(Collectors.joining(","));
		System.out.println(authorityString);
		return authorityString;
	}
	
	public List<GrantedAuthority> getAuthoritiesFromClaims(Claims claims){
		
	}
	
}
