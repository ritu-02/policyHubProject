package hub.policy.security;

import java.security.Key;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;


@Component
public class JwtUtils {
	
	@Value("${SECRET_KEY}")
	private String jwtSecret;
	
//	@Value("${EXP_TIMEOUT}")
//	private int jwtExpirationMs;
	
//	private Key key;
//
//	@PostConstruct
//	public void init() {
//		key=Keys.hmacShaKeyFor(jwtSecret.getBytes());
//	}
	
	private Key getSigningKey() {
		byte[] keyBytes= Decoders.BASE64.decode(jwtSecret);
		return Keys.hmacShaKeyFor(keyBytes);
	}
	
	
	public String generateJwtToken(String email,String role) {
	   return Jwts.builder()
			      .setSubject(email)
			      .claim("role", role)
			      .setIssuedAt(new Date())
			      .setExpiration(new Date(System.currentTimeMillis() + 1000*60*60*10))
			      .signWith(getSigningKey(), SignatureAlgorithm.HS256)
			      .compact();
	}
	
	public String getUserNameFromJwtToken(Claims claims) {
		return claims.getSubject();
	}
	
	public Claims validateJwtToken(String jwtToken) {
		Claims claims = Jwts.parserBuilder()
				.setSigningKey(key)
				.build()
				.parseClaimsJws(jwtToken)
				.getBody();
		return claims;
	}

	private String getAuthoritiesInString(Collection<? extends GrantedAuthority> authorities) {
		String authorityString = authorities.stream()
				.map(authority -> authority.getAuthority())
				.collect(Collectors.joining(","));
		System.out.println(authorityString);
		return authorityString;
	}
	
	public List<GrantedAuthority> getAuthoritiesFromClaims(Claims claims){
		String authString = (String)claims.get("authorities");
		List<GrantedAuthority> authorities = AuthorityUtils.commaSeparatedStringToAuthorityList(authString);
		authorities.forEach(System.out::println);
		return authorities;
	}
	
}
